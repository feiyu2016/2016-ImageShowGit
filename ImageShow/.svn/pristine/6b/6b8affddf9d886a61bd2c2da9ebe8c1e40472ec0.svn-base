package com.suo.image.activity;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import net.tsz.afinal.FinalBitmap;
import cn.bmob.v3.BmobQuery;
import cn.bmob.v3.BmobQuery.CachePolicy;
import cn.bmob.v3.listener.FindListener;
import cn.waps.AppConnect;

import com.nineoldandroids.view.ViewHelper;
import com.suo.demo.R;
import com.suo.image.activity.MainNetActivity.ImageAdapter;
import com.suo.image.adapter.ArrayListAdapter;
import com.suo.image.adapter.ViewHolder;
import com.suo.image.bean.AboutBean;
import com.suo.image.bean.ImageBean;
import com.suo.image.util.Density;
import com.suo.image.util.Log;
import com.suo.image.util.Pub;
import com.suo.image.view.DragLayout;
import com.suo.image.view.DragLayout.Status;
import com.suo.image.view.MyGridView;
import com.suo.image.view.DragLayout.DragListener;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.PorterDuff.Mode;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.view.animation.AnimationUtils;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class Main_new extends BaseActivity {

	private DragLayout main_dl;
	private Button btn_icon;
	private ImageView iv_bottom;
	private TextView tv_home;
	private TextView tv_upload;
	private TextView tv_friend;
	private TextView tv_word;

	private MyGridView imageGridView;
	private Button more;
	private Button btn_refresh;

	private ArrayList<ImageBean> list;
	private ProgressDialog progressDialog;
	private ImageAdapter adapter;

	private int currType = 1;
	private int count = 1;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main_new);

		initDragLayout();
		initView();

		prepareData();

		initLayout();
		
		queryAbout();
		queryData(true, currType);
		
	}

	private void prepareData() {

		list = new ArrayList<ImageBean>();
		adapter = new ImageAdapter(this);
		AppConnect.getInstance(this).initUninstallAd(this);
		AppConnect.getInstance(this).setCrashReport(false);// 默认值 true 开启，设置
															// false 关闭
	}
	
	private void initLayout() {
		imageGridView = (MyGridView) findViewById(R.id.imageGridView);
		more = (Button) findViewById(R.id.more);
		btn_refresh = (Button) findViewById(R.id.btn_refresh);
		int width = Density.getSceenWidth(this);
		LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) imageGridView.getLayoutParams();
		lp.setMargins(width / 60, width / 60, width / 60, width / 60);
		imageGridView.setLayoutParams(lp);
		
		imageGridView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				if (TextUtils.isEmpty(list.get(position).getWordUrl())){
					Intent intent = new Intent(Main_new.this, PictureNetContentActivity.class);
					intent.putExtra("imageBean", list.get(position));
					startActivity(intent);
				}else{
					Intent intent = new Intent(Main_new.this, WordsActivity.class);
					intent.putExtra("imageBean", list.get(position));
					startActivity(intent);
				}
				
			}
		});
		
		more.setOnClickListener(this);
		btn_refresh.setOnClickListener(this);
	}
	
	private void queryData(boolean top, int type) {
		if (list != null && top){
			list.clear();
			adapter.setList(list);
			imageGridView.setAdapter(adapter);
		}
		BmobQuery<ImageBean> bmobQuery = new BmobQuery<ImageBean>();
//		bmobQuery.addWhereEqualTo("age", 25);
//		bmobQuery.addWhereNotEqualTo("age", 25);
//		bmobQuery.addQueryKeys("objectId");
		if (type == 1){
			bmobQuery.addWhereContains("type", "1");
		}else if (type == 2){
			bmobQuery.addWhereContains("type", "2");
		}else if (type == 3){
			bmobQuery.addWhereContains("type", "3");
		}
		bmobQuery.setLimit(10);
		bmobQuery.setSkip(list.size());
		bmobQuery.order("-imageId");
		bmobQuery.setCachePolicy(CachePolicy.CACHE_THEN_NETWORK);	// 先从缓存取数据，无论结果如何都会再次从网络获取数据。也就是说会产生2次调用。
																	// 通常的用法是先快速取出缓存数据展示view，然后再后台连接网络取得最新数据，取到后用来自网络服务器的最新数据更新view。
		
		bmobQuery.findObjects(this, new FindListener<ImageBean>() {
			@Override
			public void onSuccess(List<ImageBean> object) {
				if (count == 1){
					Log.e("查询成功：共" + object.size() + "条数据。");
					if (object != null && object.size()>0){
						list.addAll(object);
						adapter.setList(list);
						imageGridView.setAdapter(adapter);
						count = 2;
					}else{
						showToast("已无更多数据啦.");
					}
				}else{
					count = 1;
				}
				
				
			}

			@Override
			public void onError(int code, String msg) {
				Log.e("查询失败  code:" + code + "|msg:" + msg);
//				startActivity(new Intent(Main_new.this, MainActivity.class));
//				finish();
			}
		});
	}
	
	private void queryAbout(){
		BmobQuery<AboutBean> bmobQuery = new BmobQuery<AboutBean>();
		bmobQuery.order("-updatedAt");
		bmobQuery.findObjects(this, new FindListener<AboutBean>() {
			@Override
			public void onSuccess(List<AboutBean> object) {
//				Log.e("查询成功：共" + object.size() + "条数据。");
				if (object != null && object.size()>0){
					putString("about", object.get(0).getAboutText(), true);
				}
				
			}

			@Override
			public void onError(int code, String msg) {
				Log.e("查询失败：" + msg);
			}
		});
	}
	
	class ImageAdapter extends ArrayListAdapter<ImageBean>{

		private BaseActivity context;
		private FinalBitmap fb;
		
		public ImageAdapter(BaseActivity context) {
			super(context);
			this.context = context;
		}
		
		public ImageAdapter(BaseActivity context, ListView listView) {
			super(context, listView);
			this.context = context;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = LayoutInflater.from(context).inflate(
						R.layout.image_gridview, parent, false);
			}
			
			ImageView image_grid = ViewHolder.get(convertView, R.id.image_grid);
			TextView text_grid = ViewHolder.get(convertView, R.id.text_grid);
			ImageView iv_words_tag = ViewHolder.get(convertView, R.id.iv_words_tag);
			
			final ImageBean bean = (ImageBean)getItem(position);
			
			fb = FinalBitmap.create(context);
			fb.configLoadingImage(R.drawable.default_image);
			fb.display(image_grid, bean.getImageUrl());
//			SimpleImageLoader.display(context, viewHolder.image, url, R.drawable.default_image);
			FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) image_grid.getLayoutParams();
			lp.height = Density.getSceenHeight(context)/4;
			image_grid.setLayoutParams(lp);
			text_grid.setText(bean.getImageText());
			
			
			if (bean.getImageUrl().contains("http://file.bmob.cn")){
				iv_words_tag.setVisibility(View.VISIBLE);
				iv_words_tag.setImageResource(R.drawable.words_tag_green);
			}else{
				
				if (!TextUtils.isEmpty(bean.getWordUrl())){
					iv_words_tag.setVisibility(View.VISIBLE);
					iv_words_tag.setImageResource(R.drawable.words_tag);
				}else{
					iv_words_tag.setVisibility(View.GONE);
				}
			}
			
			return convertView;
		}
		
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_settings:
			progressDialog = new ProgressDialog(Main_new.this);
			progressDialog.setMessage("正在清除,请稍后..");
			progressDialog.show();
			File file = new File(Pub.getBaseDir() + "image/");
			clearData(file);
			mEditor.clear();
			mEditor.commit();
			progressDialog.dismiss();
			Toast.makeText(Main_new.this, "清除成功..", Toast.LENGTH_LONG)
					.show();
			break;
		case R.id.menu_settings2:
			AppConnect.getInstance(Main_new.this).showOffers(
					Main_new.this);
			break;
		case R.id.menu_settings3:
			AppConnect.getInstance(Main_new.this).showFeedback(
					Main_new.this);
			break;
		case R.id.menu_settings4:
			String text = getString("about", "");
			if (!TextUtils.isEmpty(text)){
				new AlertDialog.Builder(Main_new.this)
				.setTitle("关于")
				.setMessage(text)
				.create().show();
			}else{
				new AlertDialog.Builder(Main_new.this)
				.setTitle("关于")
				.setMessage(
						"		" + "我只是一个普通的个人开发者，用业余时间来更新这个app，如果你喜欢这个app，"
								+ "可以来访问我的百度贴吧————<吴鸿琦吧>。希望你会喜欢，谢谢！")
				.create().show();
			}
			
			break;
		default:
			break;
		}

		return super.onOptionsItemSelected(item);
	}

	private void clearData(File file) {
		if (file.exists()) { // �ж��ļ��Ƿ����
			if (file.isFile()) { // �ж��Ƿ����ļ�
				file.delete(); // delete()���� ��Ӧ��֪�� ��ɾ�����˼;
			} else if (file.isDirectory()) { // �����������һ��Ŀ¼
				File files[] = file.listFiles(); // ����Ŀ¼�����е��ļ� files[];
				for (int i = 0; i < files.length; i++) { // ����Ŀ¼�����е��ļ�
					this.clearData(files[i]); // ��ÿ���ļ� ������������е��
				}
			}
			file.delete();
		} else {

		}
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		System.out.println("TabHost_Index.java onKeyDown");
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			if (main_dl.getStatus() == Status.Open){
				new AlertDialog.Builder(Main_new.this).setTitle("提示").setMessage("您真的要退出美图Show吗?")
				.setPositiveButton("确定", new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
						finish();
						System.exit(0);
					}
				})
				.setNegativeButton("取消", new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
					}
				}).create().show();
			}else{
				main_dl.open();
			}
			
		}
		return false;
	}

	private void initDragLayout() {
		main_dl = (DragLayout) findViewById(R.id.main_dl);
		main_dl.setDragListener(new DragListener() {
			@Override
			public void onOpen() {
				// lv.smoothScrollToPosition(new Random().nextInt(30));
			}

			@Override
			public void onClose() {
			}

			@Override
			public void onDrag(float percent) {
				animate(percent);
			}
		});
	}

	private void initView() {
		btn_icon = (Button) findViewById(R.id.btn_icon);
		iv_bottom = (ImageView) findViewById(R.id.iv_bottom);
		tv_home = (TextView) findViewById(R.id.tv_home);
		tv_upload = (TextView) findViewById(R.id.tv_upload);
		tv_friend = (TextView) findViewById(R.id.tv_friend);
		tv_word = (TextView) findViewById(R.id.tv_word);
		
		btn_icon.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				main_dl.open();
			}
		});
		
		tv_home.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if (currType != 1){
					currType = 1;
					queryData(true, currType);
				}
				main_dl.close();
			}
		});
		
		tv_friend.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if (currType != 2){
					currType = 2;
					queryData(true, currType);
				}
				main_dl.close();
			}
		});
		
		tv_word.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if (currType != 3){
					currType = 3;
					queryData(true, currType);
				}
				main_dl.close();
			}
		});
		
		tv_upload.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				launch(AddImageTextActivity.class);
			}
		});
	}

	private void animate(float percent) {
		ViewGroup vg_left = main_dl.getVg_left();
		ViewGroup vg_main = main_dl.getVg_main();

		float f1 = 1 - percent * 0.3f;
		ViewHelper.setScaleX(vg_main, f1);
		ViewHelper.setScaleY(vg_main, f1);
		ViewHelper.setTranslationX(vg_left, -vg_left.getWidth() / 2.2f
				+ vg_left.getWidth() / 2.2f * percent);
		ViewHelper.setScaleX(vg_left, 0.5f + 0.5f * percent);
		ViewHelper.setScaleY(vg_left, 0.5f + 0.5f * percent);
		ViewHelper.setAlpha(vg_left, percent);
		ViewHelper.setAlpha(btn_icon, 1 - percent);

		int color = (Integer) evaluate(percent, Color.parseColor("#ff000000"),
				Color.parseColor("#00000000"));
		main_dl.getBackground().setColorFilter(color, Mode.SRC_OVER);
	}

	public Object evaluate(float fraction, Object startValue, Object endValue) {
		int startInt = (Integer) startValue;
		int startA = (startInt >> 24) & 0xff;
		int startR = (startInt >> 16) & 0xff;
		int startG = (startInt >> 8) & 0xff;
		int startB = startInt & 0xff;
		int endInt = (Integer) endValue;
		int endA = (endInt >> 24) & 0xff;
		int endR = (endInt >> 16) & 0xff;
		int endG = (endInt >> 8) & 0xff;
		int endB = endInt & 0xff;
		return (int) ((startA + (int) (fraction * (endA - startA))) << 24)
				| (int) ((startR + (int) (fraction * (endR - startR))) << 16)
				| (int) ((startG + (int) (fraction * (endG - startG))) << 8)
				| (int) ((startB + (int) (fraction * (endB - startB))));
	}

	@Override
	public void onClick(View v) {
		super.onClick(v);
		switch (v.getId()) {
		case R.id.more:
			queryData(false, currType);
			break;
		case R.id.btn_refresh:
			queryData(true, currType);
			break;

		default:
			break;
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		startAnim();
	}

	private void startAnim() {
		btn_icon.startAnimation(AnimationUtils.loadAnimation(this, R.anim.shake));
	}

}
